SET(CMAKE_LIBRARY_PATH ${TAKECONTROL_DEP_DIR})

#----------------------------------------------------
# Qt
#----------------------------------------------------

IF(UNIX AND NOT ANDROID)
	SET(ENV{Qt5_DIR} "")
ENDIF()

SET(QT_SEARCH_MODULES "")
SET(QT_SEARCH_MODULES ${QT_SEARCH_MODULES} Concurrent)
SET(QT_SEARCH_MODULES ${QT_SEARCH_MODULES} Core)
SET(QT_SEARCH_MODULES ${QT_SEARCH_MODULES} Gui)
SET(QT_SEARCH_MODULES ${QT_SEARCH_MODULES} LinguistTools)
SET(QT_SEARCH_MODULES ${QT_SEARCH_MODULES} Network)
SET(QT_SEARCH_MODULES ${QT_SEARCH_MODULES} Svg)
SET(QT_SEARCH_MODULES ${QT_SEARCH_MODULES} Widgets)

FIND_PACKAGE(Qt5 REQUIRED ${QT_SEARCH_MODULES} HINTS $ENV{Qt5_DIR})

INCLUDE_DIRECTORIES(${Qt5Concurrent_INCLUDE_DIRS})
SET(QT_LIBRARIES ${QT_LIBRARIES} ${Qt5Concurrent_LIBRARIES})
INCLUDE_DIRECTORIES(SYSTEM ${Qt5Core_INCLUDE_DIRS})
SET(QT_LIBRARIES ${QT_LIBRARIES} ${Qt5Core_LIBRARIES})
INCLUDE_DIRECTORIES(SYSTEM ${Qt5Gui_INCLUDE_DIRS})
SET(QT_LIBRARIES ${QT_LIBRARIES} ${Qt5Gui_LIBRARIES})
INCLUDE_DIRECTORIES(SYSTEM ${Qt5Network_INCLUDE_DIRS})
SET(QT_LIBRARIES ${QT_LIBRARIES} ${Qt5Network_LIBRARIES})
INCLUDE_DIRECTORIES(${Qt5Svg_INCLUDE_DIRS})
SET(QT_LIBRARIES ${QT_LIBRARIES} ${Qt5Svg_LIBRARIES})
INCLUDE_DIRECTORIES(SYSTEM ${Qt5Widgets_INCLUDE_DIRS})
SET(QT_LIBRARIES ${QT_LIBRARIES} ${Qt5Widgets_LIBRARIES})

#----------------------------------------------------
# GMock
#----------------------------------------------------

IF(WITH_TESTS)
	IF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/gmock/")
		execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-gmock.bat ${VS_TOOLCHAIN} ${VS_ARCH} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
	ENDIF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/gmock/")
	IF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/gmock/")
		execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-gmock.sh ${UNIX_COMPILER} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
	ENDIF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/gmock/")

	SET(LIBNAME "GTEST_DEBUG")
	SET(LIBHEADER "gtest/gtest.h")
	SET(GTEST_DEBUG_ROOT ${TAKECONTROL_DEP_DIR}/gmock/Debug)
	SET(GTEST_DEBUG_COMPONENT ${GTEST_DEBUG_COMPONENT} gtestd)

	find_package(EasyFind REQUIRED COMPONENTS ${GTEST_DEBUG_COMPONENT})
	include_directories(SYSTEM ${GTEST_DEBUG_INCLUDE_DIR})

	SET(LIBNAME "GTEST_RELEASE")
	SET(LIBHEADER "gtest/gtest.h")
	SET(GTEST_RELEASE_ROOT ${TAKECONTROL_DEP_DIR}/gmock/Release)
	SET(GTEST_RELEASE_COMPONENT ${GTEST_RELEASE_COMPONENT} gtest)

	find_package(EasyFind REQUIRED COMPONENTS ${GTEST_RELEASE_COMPONENT})
ENDIF(WITH_TESTS)
